<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */
jagg.template("sso/filter", function(inputs, outputs, jagg) { %>
<%
    var log = new Log("sso/filter");

    var site = require("/site/conf/site.json");

    /*---------------------------------------back channel authentication start ---------------------*/
    function canAuthenticate(authCookie, samlssoTokenId) {
        if (session.get("LOGGED_IN_USER")) {
            return false;
        }

        if (!site.backChannelAuth.enabled) {
            return false
        }

        if (authCookie && samlssoTokenId) {
            return true;
        }
        log.info("Cookies not found for back channel authentication");
        return false;
    }

    function setBackChannelAuthConfig() {
        var tokenEP = site.backChannelAuth.tokenEP;
        var clientKey = site.backChannelAuth.clientKey;
        var clientSecret = site.backChannelAuth.clientSecret;
        var jwtAuhthenticatorEP = site.backChannelAuth.jwtAuhthenticatorEP;

        var backChannelAuthConfig = Packages.org.wso2.carbon.cloud.back.channel.config.BackChannelAuthConfig.getInstance();
        backChannelAuthConfig.setTokenEP(tokenEP);
        backChannelAuthConfig.setClientKey(clientKey);
        backChannelAuthConfig.setClientSecret(clientSecret);
        backChannelAuthConfig.setJwtAuthenticatorEP(jwtAuhthenticatorEP);
    }

    var authCookie = request.getCookie("commonAuthId");
    var samlssoTokenId = request.getCookie("samlssoTokenId");

    if (canAuthenticate(authCookie, samlssoTokenId)) {

        try {
            setBackChannelAuthConfig();
            var issuer = site.backChannelAuth.issuer;
            var backChannelAuthHandler = Packages.org.wso2.carbon.cloud.back.channel.BackChannelAuthHandler;
            var authInfo = backChannelAuthHandler.login(issuer, authCookie.value, samlssoTokenId.value);
            if (authInfo) {
                var username = String(authInfo.getUsername());
                var sessionIndex = String(authInfo.getSessionIndex());
                jagg.setUser(username);
                backChannelAuthHandler.setSession(session, sessionIndex, issuer);
                session.put("back-channel-auth", "true");

                log.info("Back channel login successful for user :" + username);
                //-------------------APP Specific---------------------------
                var modManager = jagg.module("manager");
                jagg.setSelectedCloud(request.getRequestURL());
                var permission = modManager.getPropertyValue(jagg.getSelectedCloud() + LOGIN_PERMISSION);
                var isUserAuthorized = modManager.checkAuthorizationForUser(username, permission);
                if(isUserAuthorized){
                    jagg.setUser(username);
                    var email = modManager.getEmailAddressForUser(username);
                    modManager.setUserEmailAddress(email);
                    session.put("LOGGED_IN_USER", username);
                    response.sendRedirect("/appmgt/site/pages/index.jag");
                } else {
                    log.info("User not authorized.Redirect to 401 page.");
                    session.invalidate();
                    response.sendRedirect("/appmgt/site/pages/error-pages/401.html");
                }
                //var url = request.getRequestURL();
                //response.sendRedirect(url);
                return;
            } else {
                log.info("Could not do back channel authentication. Continue with SAML flow");
            }
        } catch (e) {
            log.error("Error while trying to authenticate using back channel authentication. Continue with SAML flow");
            log.error(e);
        }
    }

    /*---------------------------------------back channel authentication end ---------------------*/

    var security =require("sso");
	var ssoRelyingParty = new security.SSORelyingParty(jagg.getIssuer(request.getRequestURL()));
	var sessionId = session.getId();
	var isAuthenticated = ssoRelyingParty.isSessionAuthenticated(sessionId);

    if(jagg.getUser()){
        return;
    }

	var requestURI;
	var requestedPage = request.getParameter("requestedPage");
	if(requestedPage!=null){
	requestURI = requestedPage;
	}else{
	  requestURI = request.getRequestURI();
	  if(request.getQueryString()!=null){
	    requestURI =requestURI+'?'+request.getQueryString();
	  }
	}
	var checkSSO = true;

	if(requestURI.indexOf("register.jag") != -1) {
		checkSSO = false;
	}else if(requestURI.indexOf("confirmemail.jag") != -1) {
		checkSSO = false;
	}
	if (checkSSO && !Boolean(isAuthenticated)) {

	    ssoRelyingParty.setProperty("identityProviderURL", site.ssoConfiguration.identityProviderURL);
	    ssoRelyingParty.setProperty("keyStorePassword", site.ssoConfiguration.keyStorePassword);
	    ssoRelyingParty.setProperty("identityAlias",site.ssoConfiguration.identityAlias);
	    ssoRelyingParty.setProperty("keyStoreName",site.ssoConfiguration.keyStoreName);

	    var samlAuthRequest = ssoRelyingParty.getSAMLAuthRequest();
	    var encodedRequest = ssoRelyingParty.encode(samlAuthRequest);
	    var relayState = ssoRelyingParty.getUUID();
	    ssoRelyingParty.setRelayStateProperty(relayState, requestURI);
	    var idpURL = ssoRelyingParty.getProperty("identityProviderURL");
%>
<div>

	        <p>You are now redirected to Identity. If the

	        redirection fails, please click the post button.</p>

	        <form method="post" action="<%=idpURL%>">

	            <p>

	                <input type="hidden" name="SAMLRequest"

	                value="<%= encodedRequest %>"/>

	                <input type="hidden" name="RelayState" value="<%= relayState %>"/>

	                <input type="hidden" name="SSOAuthSessionID" value="<%= sessionId %>"/>

	                <button type="submit">POST</button>

	            </p>

	        </form>

	    </div>

	    <script type = "text/javascript" >

	           document.forms[0].submit();

	    </script>

<%  }  %>
<% }); %>


